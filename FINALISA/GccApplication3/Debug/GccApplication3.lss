
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000103a  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f8  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ac  00000000  00000000  000020ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  0000289c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005fd  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000351d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <motor1_stop>:
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
  a6:	40 98       	cbi	0x08, 0	; 8
  a8:	41 98       	cbi	0x08, 1	; 8
  aa:	17 bc       	out	0x27, r1	; 39
  ac:	08 95       	ret

000000ae <motor1_forward>:
  ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motor1_direction>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	29 f0       	breq	.+10     	; 0xc0 <motor1_forward+0x12>
  b6:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motor1_direction>
  c0:	41 9a       	sbi	0x08, 1	; 8
  c2:	40 98       	cbi	0x08, 0	; 8
  c4:	08 95       	ret

000000c6 <motor1_backward>:
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motor1_direction>
  ca:	88 23       	and	r24, r24
  cc:	21 f0       	breq	.+8      	; 0xd6 <motor1_backward+0x10>
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
  d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <motor1_direction>
  d6:	40 9a       	sbi	0x08, 0	; 8
  d8:	41 98       	cbi	0x08, 1	; 8
  da:	08 95       	ret

000000dc <motor2_stop>:
	MOTOR2_PORT &= ~(1<<IN3);
	
}
void motor2_stop()
{
	MOTOR2_PORT &= ~(1<<IN3);
  dc:	42 98       	cbi	0x08, 2	; 8
	MOTOR2_PORT &= ~(1<<IN4);
  de:	43 98       	cbi	0x08, 3	; 8
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
  e0:	18 bc       	out	0x28, r1	; 40
  e2:	08 95       	ret

000000e4 <motor2_forward>:
	motor2_speed(0);
}*/

void motor2_forward(void)
{
	if(motor2_direction != forward)
  e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motor2_direction>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	29 f0       	breq	.+10     	; 0xf6 <motor2_forward+0x12>
	{
		motor2_stop();
  ec:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
		motor2_direction = forward ;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <motor2_direction>
	}
	MOTOR2_PORT |=(1<<IN4);
  f6:	43 9a       	sbi	0x08, 3	; 8
	MOTOR2_PORT &= ~(1<<IN3);
  f8:	42 98       	cbi	0x08, 2	; 8
  fa:	08 95       	ret

000000fc <motors_init>:
char motor1_direction =forward;
char motor2_direction = forward;

void motors_init()
{
	TCCR0A |=(1<<COM0A1)|(1<<COM0B1)|(1<<WGM00)|(1<<WGM01);
  fc:	84 b5       	in	r24, 0x24	; 36
  fe:	83 6a       	ori	r24, 0xA3	; 163
 100:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=(1<<CS00);
 102:	85 b5       	in	r24, 0x25	; 37
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 bd       	out	0x25, r24	; 37
	//motor1 
	DDRD |= (1<<EN1);
 108:	56 9a       	sbi	0x0a, 6	; 10
	MOTOR1_DDR |=(1<<IN1)|(1<<IN2);
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	87 b9       	out	0x07, r24	; 7
	motor1_forward();
 110:	0e 94 57 00 	call	0xae	; 0xae <motor1_forward>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 114:	17 bc       	out	0x27, r1	; 39
	DDRD |= (1<<EN1);
	MOTOR1_DDR |=(1<<IN1)|(1<<IN2);
	motor1_forward();
	motor1_speed(0);
	//motor2
	DDRD |= 1<<EN2 ;
 116:	55 9a       	sbi	0x0a, 5	; 10
	MOTOR2_DDR |= (1<<IN3)|(1<<IN4);
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	8c 60       	ori	r24, 0x0C	; 12
 11c:	87 b9       	out	0x07, r24	; 7
	motor2_forward();
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <motor2_forward>
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
 122:	18 bc       	out	0x28, r1	; 40
 124:	08 95       	ret

00000126 <motor2_backward>:
	motor2_speed(0);
	
}
void motor2_backward(void)
{
	if(motor2_direction != backward)
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motor2_direction>
 12a:	88 23       	and	r24, r24
 12c:	21 f0       	breq	.+8      	; 0x136 <motor2_backward+0x10>
	{
		motor2_stop();
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
		motor2_direction = backward ;
 132:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <motor2_direction>
		
	}
	MOTOR2_PORT |=(1<<IN3);
 136:	42 9a       	sbi	0x08, 2	; 8
	MOTOR2_PORT &= ~(1<<IN4);
 138:	43 98       	cbi	0x08, 3	; 8
 13a:	08 95       	ret

0000013c <ultra_config>:


int ovf = 0;

void ultra_config(void){
	ULTRA_DDR |=(1<<trig); //output
 13c:	21 9a       	sbi	0x04, 1	; 4
	ULTRA_DDR &= ~(1<<echo); // input
 13e:	20 98       	cbi	0x04, 0	; 4
 140:	08 95       	ret

00000142 <sendEcho>:
	// PORTB =0xff;
}

void sendEcho()
{
	ULTRA_PORT |=(1<<trig);
 142:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	85 e3       	ldi	r24, 0x35	; 53
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <sendEcho+0x4>
 14a:	00 00       	nop
	_delay_us(10);
	ULTRA_PORT &=~(1<<trig);
 14c:	29 98       	cbi	0x05, 1	; 5
 14e:	08 95       	ret

00000150 <cm_Distance>:

double cm_Distance()
{

	//over flow intterupt enable
	TIMSK1 |= (1<<TOIE1);
 150:	ef e6       	ldi	r30, 0x6F	; 111
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
	TCCR1A = 0 ;
 15a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>



	sendEcho();
 15e:	0e 94 a1 00 	call	0x142	; 0x142 <sendEcho>
	TCNT1 = 0 ;
 162:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 166:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//input capture at rising no prescaler
	TCCR1B |=(1<<ICES1)|(1<<CS10);
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	81 64       	ori	r24, 0x41	; 65
 172:	80 83       	st	Z, r24
	//clear capture flag
	TIFR1 |= (1<<ICF1);
 174:	b5 9a       	sbi	0x16, 5	; 22
	TIFR1 |= (1<<TOV1);
 176:	b0 9a       	sbi	0x16, 0	; 22
	//wait for rising edge
	while((TIFR1 & (1<<ICF1))==0);
 178:	b5 9b       	sbis	0x16, 5	; 22
 17a:	fe cf       	rjmp	.-4      	; 0x178 <cm_Distance+0x28>
	TCNT1 = 0 ;
 17c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//capture on falling edge
	TCCR1B &=~(1<<ICES1);
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8f 7b       	andi	r24, 0xBF	; 191
 18c:	80 83       	st	Z, r24
	//clear capture flag
	TIFR1 |= (1<<ICF1);
 18e:	b5 9a       	sbi	0x16, 5	; 22
	TIFR1 |= (1<<TOV1);
 190:	b0 9a       	sbi	0x16, 0	; 22
	ovf=0 ;
 192:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 196:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>

	//wait for falling edge
	while((TIFR1 & (1<<ICF1))==0);
 19a:	b5 9b       	sbis	0x16, 5	; 22
 19c:	fe cf       	rjmp	.-4      	; 0x19a <cm_Distance+0x4a>
	unsigned int cap = (0x0000ffff & ICR1 );
 19e:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 1a2:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>

	unsigned long count = cap + 65535*ovf;
	double  distance = (double)count/928;
	//return 0 ;

	return distance;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 bd 02 	call	0x57a	; 0x57a <__floatunsisf>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	48 e6       	ldi	r20, 0x68	; 104
 1b4:	54 e4       	ldi	r21, 0x44	; 68
 1b6:	0e 94 4b 02 	call	0x496	; 0x496 <__divsf3>

}
 1ba:	08 95       	ret

000001bc <__vector_13>:


ISR(TIMER1_OVF_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
	ovf++;
 1ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

}
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <car_init>:

void car_init(void)
{
	//config IR interrupts
	
	ultra_config();
 1ea:	0e 94 9e 00 	call	0x13c	; 0x13c <ultra_config>
	motors_init();
 1ee:	0e 94 7e 00 	call	0xfc	; 0xfc <motors_init>
 1f2:	08 95       	ret

000001f4 <Brake>:
	}
	Dir = BL ;
}
void Brake(void)
{
	Dir = S ;
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
motor1_stop();
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
motor2_stop();	
 1fe:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
 202:	08 95       	ret

00000204 <carForward>:
	
	
}

void carForward(char s)
{
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
	if(Dir != F)
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	31 f0       	breq	.+12     	; 0x21c <carForward+0x18>
	{
		Brake() ;
 210:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor1_forward();
 214:	0e 94 57 00 	call	0xae	; 0xae <motor1_forward>
		motor2_forward();
 218:	0e 94 72 00 	call	0xe4	; 0xe4 <motor2_forward>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 21c:	c7 bd       	out	0x27, r28	; 39
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
 21e:	c8 bd       	out	0x28, r28	; 40
		
	}
        motor1_speed(s);
		motor2_speed(s);
	Dir = F ;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
}
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <carReverse>:

void carReverse(char s)
{
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	
	if(Dir != B)
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 232:	88 23       	and	r24, r24
 234:	31 f0       	breq	.+12     	; 0x242 <carReverse+0x18>
	{
		
		Brake();
 236:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor1_backward();
 23a:	0e 94 63 00 	call	0xc6	; 0xc6 <motor1_backward>
		motor2_backward();
 23e:	0e 94 93 00 	call	0x126	; 0x126 <motor2_backward>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 242:	c7 bd       	out	0x27, r28	; 39
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
 244:	c8 bd       	out	0x28, r28	; 40
		
}
		motor1_speed(s);
		motor2_speed(s);
		Dir = B;
 246:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Dir>
		
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <carRightF>:

void carRightF(void)
{
	if(Dir != FR)
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	41 f0       	breq	.+16     	; 0x266 <carRightF+0x18>
	{
		
		Brake();
 256:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor2_forward();
 25a:	0e 94 72 00 	call	0xe4	; 0xe4 <motor2_forward>
		motor1_stop();
 25e:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
 262:	87 e8       	ldi	r24, 0x87	; 135
 264:	88 bd       	out	0x28, r24	; 40
		motor2_speed(135);
		
	}
	Dir=FR;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 26c:	08 95       	ret

0000026e <carRightB>:
	
}

void carRightB(void)
{
	if(Dir != BR)
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 272:	85 30       	cpi	r24, 0x05	; 5
 274:	41 f0       	breq	.+16     	; 0x286 <carRightB+0x18>
	{
		
		Brake();
 276:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor2_backward();
 27a:	0e 94 93 00 	call	0x126	; 0x126 <motor2_backward>
		motor1_stop();
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
 282:	87 e8       	ldi	r24, 0x87	; 135
 284:	88 bd       	out	0x28, r24	; 40
		motor2_speed(135);
		
	}
	Dir=BR;
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 28c:	08 95       	ret

0000028e <carLeftF>:
	
}

void carLeftF(void)
{
	if(Dir != FL)
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	41 f0       	breq	.+16     	; 0x2a6 <carLeftF+0x18>
	{
		Brake();
 296:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
	motor1_forward();
 29a:	0e 94 57 00 	call	0xae	; 0xae <motor1_forward>
	motor2_stop();
 29e:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 2a2:	86 e9       	ldi	r24, 0x96	; 150
 2a4:	87 bd       	out	0x27, r24	; 39
	motor1_speed(150);
	}
	Dir = FL ;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 2ac:	08 95       	ret

000002ae <carLeftB>:
}

void carLeftB(void)
{
	if(Dir != BL)
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	41 f0       	breq	.+16     	; 0x2c6 <carLeftB+0x18>
	{
		Brake();
 2b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor1_backward();
 2ba:	0e 94 63 00 	call	0xc6	; 0xc6 <motor1_backward>
		motor2_stop();
 2be:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
 2c2:	86 e9       	ldi	r24, 0x96	; 150
 2c4:	87 bd       	out	0x27, r24	; 39
		motor1_speed(150);
	}
	Dir = BL ;
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 2cc:	08 95       	ret

000002ce <main>:



int main(void)
{
sei();
 2ce:	78 94       	sei
car_init();
 2d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <car_init>

//ultra_config();

  DDRC &= ~((1<<DDC5)|(1<<DDC4));
 2d4:	87 b1       	in	r24, 0x07	; 7
 2d6:	8f 7c       	andi	r24, 0xCF	; 207
 2d8:	87 b9       	out	0x07, r24	; 7

	while (1) 
    {


	if(cm_Distance()>10)
 2da:	0e 94 a8 00 	call	0x150	; 0x150 <cm_Distance>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e2       	ldi	r20, 0x20	; 32
 2e4:	51 e4       	ldi	r21, 0x41	; 65
 2e6:	0e 94 4b 03 	call	0x696	; 0x696 <__gesf2>
 2ea:	18 16       	cp	r1, r24
 2ec:	0c f0       	brlt	.+2      	; 0x2f0 <main+0x22>
 2ee:	62 c0       	rjmp	.+196    	; 0x3b4 <main+0xe6>
	{
		char f = ((PINC & 0b00110000)>>4);
 2f0:	86 b1       	in	r24, 0x06	; 6
 2f2:	80 73       	andi	r24, 0x30	; 48
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	95 95       	asr	r25
 300:	87 95       	ror	r24
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	31 ee       	ldi	r19, 0xE1	; 225
 30a:	44 e0       	ldi	r20, 0x04	; 4
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	40 40       	sbci	r20, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x3e>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x48>
 316:	00 00       	nop
		_delay_ms(100);
		if(f !=((PINC & 0b00110000)>>4) )f=0;
 318:	26 b1       	in	r18, 0x06	; 6
 31a:	ac 01       	movw	r20, r24
 31c:	55 27       	eor	r21, r21
 31e:	20 73       	andi	r18, 0x30	; 48
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	35 95       	asr	r19
 324:	27 95       	ror	r18
 326:	35 95       	asr	r19
 328:	27 95       	ror	r18
 32a:	35 95       	asr	r19
 32c:	27 95       	ror	r18
 32e:	35 95       	asr	r19
 330:	27 95       	ror	r18
 332:	42 17       	cp	r20, r18
 334:	53 07       	cpc	r21, r19
 336:	19 f4       	brne	.+6      	; 0x33e <main+0x70>
    {


	if(cm_Distance()>10)
	{
		char f = ((PINC & 0b00110000)>>4);
 338:	c8 2f       	mov	r28, r24
		_delay_ms(100);
		if(f !=((PINC & 0b00110000)>>4) )f=0;
		if(f==0)carForward(150);
 33a:	81 11       	cpse	r24, r1
 33c:	04 c0       	rjmp	.+8      	; 0x346 <main+0x78>
 33e:	86 e9       	ldi	r24, 0x96	; 150
 340:	0e 94 02 01 	call	0x204	; 0x204 <carForward>
 344:	ca cf       	rjmp	.-108    	; 0x2da <main+0xc>
		else
		{
			Brake();
 346:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	93 ed       	ldi	r25, 0xD3	; 211
 34e:	20 e3       	ldi	r18, 0x30	; 48
 350:	81 50       	subi	r24, 0x01	; 1
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	20 40       	sbci	r18, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x82>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x8c>
 35a:	00 00       	nop
			_delay_ms(1000);
			if(f==3)
 35c:	c3 30       	cpi	r28, 0x03	; 3
 35e:	69 f4       	brne	.+26     	; 0x37a <main+0xac>
			{
				carReverse(150);
 360:	86 e9       	ldi	r24, 0x96	; 150
 362:	0e 94 15 01 	call	0x22a	; 0x22a <carReverse>
 366:	3f ef       	ldi	r19, 0xFF	; 255
 368:	43 ed       	ldi	r20, 0xD3	; 211
 36a:	80 e3       	ldi	r24, 0x30	; 48
 36c:	31 50       	subi	r19, 0x01	; 1
 36e:	40 40       	sbci	r20, 0x00	; 0
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x9e>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0xa8>
 376:	00 00       	nop
 378:	b0 cf       	rjmp	.-160    	; 0x2da <main+0xc>
				_delay_ms(1000);
			}
			if(f==2)
 37a:	c2 30       	cpi	r28, 0x02	; 2
 37c:	61 f4       	brne	.+24     	; 0x396 <main+0xc8>
			{
				carRightF();
 37e:	0e 94 27 01 	call	0x24e	; 0x24e <carRightF>
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	2d e2       	ldi	r18, 0x2D	; 45
 386:	32 e2       	ldi	r19, 0x22	; 34
 388:	91 50       	subi	r25, 0x01	; 1
 38a:	20 40       	sbci	r18, 0x00	; 0
 38c:	30 40       	sbci	r19, 0x00	; 0
 38e:	e1 f7       	brne	.-8      	; 0x388 <main+0xba>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0xc4>
 392:	00 00       	nop
 394:	a2 cf       	rjmp	.-188    	; 0x2da <main+0xc>
				_delay_ms(700);
				
			}
			if(f==1)
 396:	c1 30       	cpi	r28, 0x01	; 1
 398:	09 f0       	breq	.+2      	; 0x39c <main+0xce>
 39a:	9f cf       	rjmp	.-194    	; 0x2da <main+0xc>
			{
				carLeftF();
 39c:	0e 94 47 01 	call	0x28e	; 0x28e <carLeftF>
 3a0:	4f ef       	ldi	r20, 0xFF	; 255
 3a2:	8d e2       	ldi	r24, 0x2D	; 45
 3a4:	92 e2       	ldi	r25, 0x22	; 34
 3a6:	41 50       	subi	r20, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0xd8>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0xe2>
 3b0:	00 00       	nop
 3b2:	93 cf       	rjmp	.-218    	; 0x2da <main+0xc>
		}
		
	}
	else
	{
		char f = ((PINC & 0b00110000)>>4);
 3b4:	86 b1       	in	r24, 0x06	; 6
 3b6:	80 73       	andi	r24, 0x30	; 48
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	95 95       	asr	r25
 3bc:	87 95       	ror	r24
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	95 95       	asr	r25
 3c4:	87 95       	ror	r24
 3c6:	95 95       	asr	r25
 3c8:	87 95       	ror	r24
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	31 ee       	ldi	r19, 0xE1	; 225
 3ce:	44 e0       	ldi	r20, 0x04	; 4
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	30 40       	sbci	r19, 0x00	; 0
 3d4:	40 40       	sbci	r20, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0x102>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x10c>
 3da:	00 00       	nop
		_delay_ms(100);
		if(f !=((PINC & 0b00110000)>>4) )f=0;
 3dc:	26 b1       	in	r18, 0x06	; 6
 3de:	ac 01       	movw	r20, r24
 3e0:	55 27       	eor	r21, r21
 3e2:	20 73       	andi	r18, 0x30	; 48
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	35 95       	asr	r19
 3e8:	27 95       	ror	r18
 3ea:	35 95       	asr	r19
 3ec:	27 95       	ror	r18
 3ee:	35 95       	asr	r19
 3f0:	27 95       	ror	r18
 3f2:	35 95       	asr	r19
 3f4:	27 95       	ror	r18
 3f6:	42 17       	cp	r20, r18
 3f8:	53 07       	cpc	r21, r19
 3fa:	09 f0       	breq	.+2      	; 0x3fe <main+0x130>
 3fc:	40 c0       	rjmp	.+128    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		}
		
	}
	else
	{
		char f = ((PINC & 0b00110000)>>4);
 3fe:	c8 2f       	mov	r28, r24
		_delay_ms(100);
		if(f !=((PINC & 0b00110000)>>4) )f=0;
		Brake();
 400:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	93 ed       	ldi	r25, 0xD3	; 211
 408:	20 e3       	ldi	r18, 0x30	; 48
 40a:	81 50       	subi	r24, 0x01	; 1
 40c:	90 40       	sbci	r25, 0x00	; 0
 40e:	20 40       	sbci	r18, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
		_delay_ms(1000);
		if(f==1)
 416:	c1 30       	cpi	r28, 0x01	; 1
 418:	61 f4       	brne	.+24     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		{
			carLeftB();
 41a:	0e 94 57 01 	call	0x2ae	; 0x2ae <carLeftB>
 41e:	3f ef       	ldi	r19, 0xFF	; 255
 420:	4d e2       	ldi	r20, 0x2D	; 45
 422:	82 e2       	ldi	r24, 0x22	; 34
 424:	31 50       	subi	r19, 0x01	; 1
 426:	40 40       	sbci	r20, 0x00	; 0
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	0e c0       	rjmp	.+28     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			_delay_ms(700);
		}
		if(f==2)
 432:	c2 30       	cpi	r28, 0x02	; 2
 434:	61 f4       	brne	.+24     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		{
			carRightB();
 436:	0e 94 37 01 	call	0x26e	; 0x26e <carRightB>
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	2d e2       	ldi	r18, 0x2D	; 45
 43e:	32 e2       	ldi	r19, 0x22	; 34
 440:	91 50       	subi	r25, 0x01	; 1
 442:	20 40       	sbci	r18, 0x00	; 0
 444:	30 40       	sbci	r19, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
 44c:	46 cf       	rjmp	.-372    	; 0x2da <main+0xc>
			_delay_ms(700);
		}
		else
		{
			carReverse(150);
 44e:	86 e9       	ldi	r24, 0x96	; 150
 450:	0e 94 15 01 	call	0x22a	; 0x22a <carReverse>
 454:	4f ef       	ldi	r20, 0xFF	; 255
 456:	89 e6       	ldi	r24, 0x69	; 105
 458:	98 e1       	ldi	r25, 0x18	; 24
 45a:	41 50       	subi	r20, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 464:	00 00       	nop
		    _delay_ms(500);
			carRightB();
 466:	0e 94 37 01 	call	0x26e	; 0x26e <carRightB>
 46a:	2f ef       	ldi	r18, 0xFF	; 255
 46c:	3d e2       	ldi	r19, 0x2D	; 45
 46e:	42 e2       	ldi	r20, 0x22	; 34
 470:	21 50       	subi	r18, 0x01	; 1
 472:	30 40       	sbci	r19, 0x00	; 0
 474:	40 40       	sbci	r20, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
 47c:	2e cf       	rjmp	.-420    	; 0x2da <main+0xc>
	else
	{
		char f = ((PINC & 0b00110000)>>4);
		_delay_ms(100);
		if(f !=((PINC & 0b00110000)>>4) )f=0;
		Brake();
 47e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	93 ed       	ldi	r25, 0xD3	; 211
 486:	20 e3       	ldi	r18, 0x30	; 48
 488:	81 50       	subi	r24, 0x01	; 1
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	20 40       	sbci	r18, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
 494:	dc cf       	rjmp	.-72     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

00000496 <__divsf3>:
 496:	0e 94 5f 02 	call	0x4be	; 0x4be <__divsf3x>
 49a:	0c 94 11 03 	jmp	0x622	; 0x622 <__fp_round>
 49e:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_pscB>
 4a2:	58 f0       	brcs	.+22     	; 0x4ba <__divsf3+0x24>
 4a4:	0e 94 03 03 	call	0x606	; 0x606 <__fp_pscA>
 4a8:	40 f0       	brcs	.+16     	; 0x4ba <__divsf3+0x24>
 4aa:	29 f4       	brne	.+10     	; 0x4b6 <__divsf3+0x20>
 4ac:	5f 3f       	cpi	r21, 0xFF	; 255
 4ae:	29 f0       	breq	.+10     	; 0x4ba <__divsf3+0x24>
 4b0:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__fp_inf>
 4b4:	51 11       	cpse	r21, r1
 4b6:	0c 94 45 03 	jmp	0x68a	; 0x68a <__fp_szero>
 4ba:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_nan>

000004be <__divsf3x>:
 4be:	0e 94 22 03 	call	0x644	; 0x644 <__fp_split3>
 4c2:	68 f3       	brcs	.-38     	; 0x49e <__divsf3+0x8>

000004c4 <__divsf3_pse>:
 4c4:	99 23       	and	r25, r25
 4c6:	b1 f3       	breq	.-20     	; 0x4b4 <__divsf3+0x1e>
 4c8:	55 23       	and	r21, r21
 4ca:	91 f3       	breq	.-28     	; 0x4b0 <__divsf3+0x1a>
 4cc:	95 1b       	sub	r25, r21
 4ce:	55 0b       	sbc	r21, r21
 4d0:	bb 27       	eor	r27, r27
 4d2:	aa 27       	eor	r26, r26
 4d4:	62 17       	cp	r22, r18
 4d6:	73 07       	cpc	r23, r19
 4d8:	84 07       	cpc	r24, r20
 4da:	38 f0       	brcs	.+14     	; 0x4ea <__divsf3_pse+0x26>
 4dc:	9f 5f       	subi	r25, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255
 4e0:	22 0f       	add	r18, r18
 4e2:	33 1f       	adc	r19, r19
 4e4:	44 1f       	adc	r20, r20
 4e6:	aa 1f       	adc	r26, r26
 4e8:	a9 f3       	breq	.-22     	; 0x4d4 <__divsf3_pse+0x10>
 4ea:	35 d0       	rcall	.+106    	; 0x556 <__divsf3_pse+0x92>
 4ec:	0e 2e       	mov	r0, r30
 4ee:	3a f0       	brmi	.+14     	; 0x4fe <__divsf3_pse+0x3a>
 4f0:	e0 e8       	ldi	r30, 0x80	; 128
 4f2:	32 d0       	rcall	.+100    	; 0x558 <__divsf3_pse+0x94>
 4f4:	91 50       	subi	r25, 0x01	; 1
 4f6:	50 40       	sbci	r21, 0x00	; 0
 4f8:	e6 95       	lsr	r30
 4fa:	00 1c       	adc	r0, r0
 4fc:	ca f7       	brpl	.-14     	; 0x4f0 <__divsf3_pse+0x2c>
 4fe:	2b d0       	rcall	.+86     	; 0x556 <__divsf3_pse+0x92>
 500:	fe 2f       	mov	r31, r30
 502:	29 d0       	rcall	.+82     	; 0x556 <__divsf3_pse+0x92>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	bb 1f       	adc	r27, r27
 50c:	26 17       	cp	r18, r22
 50e:	37 07       	cpc	r19, r23
 510:	48 07       	cpc	r20, r24
 512:	ab 07       	cpc	r26, r27
 514:	b0 e8       	ldi	r27, 0x80	; 128
 516:	09 f0       	breq	.+2      	; 0x51a <__divsf3_pse+0x56>
 518:	bb 0b       	sbc	r27, r27
 51a:	80 2d       	mov	r24, r0
 51c:	bf 01       	movw	r22, r30
 51e:	ff 27       	eor	r31, r31
 520:	93 58       	subi	r25, 0x83	; 131
 522:	5f 4f       	sbci	r21, 0xFF	; 255
 524:	3a f0       	brmi	.+14     	; 0x534 <__divsf3_pse+0x70>
 526:	9e 3f       	cpi	r25, 0xFE	; 254
 528:	51 05       	cpc	r21, r1
 52a:	78 f0       	brcs	.+30     	; 0x54a <__divsf3_pse+0x86>
 52c:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__fp_inf>
 530:	0c 94 45 03 	jmp	0x68a	; 0x68a <__fp_szero>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	e4 f3       	brlt	.-8      	; 0x530 <__divsf3_pse+0x6c>
 538:	98 3e       	cpi	r25, 0xE8	; 232
 53a:	d4 f3       	brlt	.-12     	; 0x530 <__divsf3_pse+0x6c>
 53c:	86 95       	lsr	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f7 95       	ror	r31
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	c9 f7       	brne	.-14     	; 0x53c <__divsf3_pse+0x78>
 54a:	88 0f       	add	r24, r24
 54c:	91 1d       	adc	r25, r1
 54e:	96 95       	lsr	r25
 550:	87 95       	ror	r24
 552:	97 f9       	bld	r25, 7
 554:	08 95       	ret
 556:	e1 e0       	ldi	r30, 0x01	; 1
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	bb 1f       	adc	r27, r27
 560:	62 17       	cp	r22, r18
 562:	73 07       	cpc	r23, r19
 564:	84 07       	cpc	r24, r20
 566:	ba 07       	cpc	r27, r26
 568:	20 f0       	brcs	.+8      	; 0x572 <__divsf3_pse+0xae>
 56a:	62 1b       	sub	r22, r18
 56c:	73 0b       	sbc	r23, r19
 56e:	84 0b       	sbc	r24, r20
 570:	ba 0b       	sbc	r27, r26
 572:	ee 1f       	adc	r30, r30
 574:	88 f7       	brcc	.-30     	; 0x558 <__divsf3_pse+0x94>
 576:	e0 95       	com	r30
 578:	08 95       	ret

0000057a <__floatunsisf>:
 57a:	e8 94       	clt
 57c:	09 c0       	rjmp	.+18     	; 0x590 <__floatsisf+0x12>

0000057e <__floatsisf>:
 57e:	97 fb       	bst	r25, 7
 580:	3e f4       	brtc	.+14     	; 0x590 <__floatsisf+0x12>
 582:	90 95       	com	r25
 584:	80 95       	com	r24
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	99 23       	and	r25, r25
 592:	a9 f0       	breq	.+42     	; 0x5be <__floatsisf+0x40>
 594:	f9 2f       	mov	r31, r25
 596:	96 e9       	ldi	r25, 0x96	; 150
 598:	bb 27       	eor	r27, r27
 59a:	93 95       	inc	r25
 59c:	f6 95       	lsr	r31
 59e:	87 95       	ror	r24
 5a0:	77 95       	ror	r23
 5a2:	67 95       	ror	r22
 5a4:	b7 95       	ror	r27
 5a6:	f1 11       	cpse	r31, r1
 5a8:	f8 cf       	rjmp	.-16     	; 0x59a <__floatsisf+0x1c>
 5aa:	fa f4       	brpl	.+62     	; 0x5ea <__floatsisf+0x6c>
 5ac:	bb 0f       	add	r27, r27
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__floatsisf+0x36>
 5b0:	60 ff       	sbrs	r22, 0
 5b2:	1b c0       	rjmp	.+54     	; 0x5ea <__floatsisf+0x6c>
 5b4:	6f 5f       	subi	r22, 0xFF	; 255
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255
 5b8:	8f 4f       	sbci	r24, 0xFF	; 255
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	16 c0       	rjmp	.+44     	; 0x5ea <__floatsisf+0x6c>
 5be:	88 23       	and	r24, r24
 5c0:	11 f0       	breq	.+4      	; 0x5c6 <__floatsisf+0x48>
 5c2:	96 e9       	ldi	r25, 0x96	; 150
 5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <__floatsisf+0x6a>
 5c6:	77 23       	and	r23, r23
 5c8:	21 f0       	breq	.+8      	; 0x5d2 <__floatsisf+0x54>
 5ca:	9e e8       	ldi	r25, 0x8E	; 142
 5cc:	87 2f       	mov	r24, r23
 5ce:	76 2f       	mov	r23, r22
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__floatsisf+0x5e>
 5d2:	66 23       	and	r22, r22
 5d4:	71 f0       	breq	.+28     	; 0x5f2 <__floatsisf+0x74>
 5d6:	96 e8       	ldi	r25, 0x86	; 134
 5d8:	86 2f       	mov	r24, r22
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	2a f0       	brmi	.+10     	; 0x5ea <__floatsisf+0x6c>
 5e0:	9a 95       	dec	r25
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	da f7       	brpl	.-10     	; 0x5e0 <__floatsisf+0x62>
 5ea:	88 0f       	add	r24, r24
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	97 f9       	bld	r25, 7
 5f2:	08 95       	ret

000005f4 <__fp_inf>:
 5f4:	97 f9       	bld	r25, 7
 5f6:	9f 67       	ori	r25, 0x7F	; 127
 5f8:	80 e8       	ldi	r24, 0x80	; 128
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	08 95       	ret

00000600 <__fp_nan>:
 600:	9f ef       	ldi	r25, 0xFF	; 255
 602:	80 ec       	ldi	r24, 0xC0	; 192
 604:	08 95       	ret

00000606 <__fp_pscA>:
 606:	00 24       	eor	r0, r0
 608:	0a 94       	dec	r0
 60a:	16 16       	cp	r1, r22
 60c:	17 06       	cpc	r1, r23
 60e:	18 06       	cpc	r1, r24
 610:	09 06       	cpc	r0, r25
 612:	08 95       	ret

00000614 <__fp_pscB>:
 614:	00 24       	eor	r0, r0
 616:	0a 94       	dec	r0
 618:	12 16       	cp	r1, r18
 61a:	13 06       	cpc	r1, r19
 61c:	14 06       	cpc	r1, r20
 61e:	05 06       	cpc	r0, r21
 620:	08 95       	ret

00000622 <__fp_round>:
 622:	09 2e       	mov	r0, r25
 624:	03 94       	inc	r0
 626:	00 0c       	add	r0, r0
 628:	11 f4       	brne	.+4      	; 0x62e <__fp_round+0xc>
 62a:	88 23       	and	r24, r24
 62c:	52 f0       	brmi	.+20     	; 0x642 <__fp_round+0x20>
 62e:	bb 0f       	add	r27, r27
 630:	40 f4       	brcc	.+16     	; 0x642 <__fp_round+0x20>
 632:	bf 2b       	or	r27, r31
 634:	11 f4       	brne	.+4      	; 0x63a <__fp_round+0x18>
 636:	60 ff       	sbrs	r22, 0
 638:	04 c0       	rjmp	.+8      	; 0x642 <__fp_round+0x20>
 63a:	6f 5f       	subi	r22, 0xFF	; 255
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	8f 4f       	sbci	r24, 0xFF	; 255
 640:	9f 4f       	sbci	r25, 0xFF	; 255
 642:	08 95       	ret

00000644 <__fp_split3>:
 644:	57 fd       	sbrc	r21, 7
 646:	90 58       	subi	r25, 0x80	; 128
 648:	44 0f       	add	r20, r20
 64a:	55 1f       	adc	r21, r21
 64c:	59 f0       	breq	.+22     	; 0x664 <__fp_splitA+0x10>
 64e:	5f 3f       	cpi	r21, 0xFF	; 255
 650:	71 f0       	breq	.+28     	; 0x66e <__fp_splitA+0x1a>
 652:	47 95       	ror	r20

00000654 <__fp_splitA>:
 654:	88 0f       	add	r24, r24
 656:	97 fb       	bst	r25, 7
 658:	99 1f       	adc	r25, r25
 65a:	61 f0       	breq	.+24     	; 0x674 <__fp_splitA+0x20>
 65c:	9f 3f       	cpi	r25, 0xFF	; 255
 65e:	79 f0       	breq	.+30     	; 0x67e <__fp_splitA+0x2a>
 660:	87 95       	ror	r24
 662:	08 95       	ret
 664:	12 16       	cp	r1, r18
 666:	13 06       	cpc	r1, r19
 668:	14 06       	cpc	r1, r20
 66a:	55 1f       	adc	r21, r21
 66c:	f2 cf       	rjmp	.-28     	; 0x652 <__fp_split3+0xe>
 66e:	46 95       	lsr	r20
 670:	f1 df       	rcall	.-30     	; 0x654 <__fp_splitA>
 672:	08 c0       	rjmp	.+16     	; 0x684 <__fp_splitA+0x30>
 674:	16 16       	cp	r1, r22
 676:	17 06       	cpc	r1, r23
 678:	18 06       	cpc	r1, r24
 67a:	99 1f       	adc	r25, r25
 67c:	f1 cf       	rjmp	.-30     	; 0x660 <__fp_splitA+0xc>
 67e:	86 95       	lsr	r24
 680:	71 05       	cpc	r23, r1
 682:	61 05       	cpc	r22, r1
 684:	08 94       	sec
 686:	08 95       	ret

00000688 <__fp_zero>:
 688:	e8 94       	clt

0000068a <__fp_szero>:
 68a:	bb 27       	eor	r27, r27
 68c:	66 27       	eor	r22, r22
 68e:	77 27       	eor	r23, r23
 690:	cb 01       	movw	r24, r22
 692:	97 f9       	bld	r25, 7
 694:	08 95       	ret

00000696 <__gesf2>:
 696:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__fp_cmp>
 69a:	08 f4       	brcc	.+2      	; 0x69e <__gesf2+0x8>
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__fp_cmp>:
 6a0:	99 0f       	add	r25, r25
 6a2:	00 08       	sbc	r0, r0
 6a4:	55 0f       	add	r21, r21
 6a6:	aa 0b       	sbc	r26, r26
 6a8:	e0 e8       	ldi	r30, 0x80	; 128
 6aa:	fe ef       	ldi	r31, 0xFE	; 254
 6ac:	16 16       	cp	r1, r22
 6ae:	17 06       	cpc	r1, r23
 6b0:	e8 07       	cpc	r30, r24
 6b2:	f9 07       	cpc	r31, r25
 6b4:	c0 f0       	brcs	.+48     	; 0x6e6 <__fp_cmp+0x46>
 6b6:	12 16       	cp	r1, r18
 6b8:	13 06       	cpc	r1, r19
 6ba:	e4 07       	cpc	r30, r20
 6bc:	f5 07       	cpc	r31, r21
 6be:	98 f0       	brcs	.+38     	; 0x6e6 <__fp_cmp+0x46>
 6c0:	62 1b       	sub	r22, r18
 6c2:	73 0b       	sbc	r23, r19
 6c4:	84 0b       	sbc	r24, r20
 6c6:	95 0b       	sbc	r25, r21
 6c8:	39 f4       	brne	.+14     	; 0x6d8 <__fp_cmp+0x38>
 6ca:	0a 26       	eor	r0, r26
 6cc:	61 f0       	breq	.+24     	; 0x6e6 <__fp_cmp+0x46>
 6ce:	23 2b       	or	r18, r19
 6d0:	24 2b       	or	r18, r20
 6d2:	25 2b       	or	r18, r21
 6d4:	21 f4       	brne	.+8      	; 0x6de <__fp_cmp+0x3e>
 6d6:	08 95       	ret
 6d8:	0a 26       	eor	r0, r26
 6da:	09 f4       	brne	.+2      	; 0x6de <__fp_cmp+0x3e>
 6dc:	a1 40       	sbci	r26, 0x01	; 1
 6de:	a6 95       	lsr	r26
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	81 1d       	adc	r24, r1
 6e4:	81 1d       	adc	r24, r1
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
