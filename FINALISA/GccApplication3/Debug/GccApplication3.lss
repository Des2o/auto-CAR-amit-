
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005a6  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  0000063e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d81  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000701  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000023cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026c  00000000  00000000  00002a41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002cad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
  9e:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <motor1_stop>:
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
  a6:	40 98       	cbi	0x08, 0	; 8
  a8:	41 98       	cbi	0x08, 1	; 8
  aa:	17 bc       	out	0x27, r1	; 39
  ac:	08 95       	ret

000000ae <motor1_forward>:
  ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motor1_direction>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	29 f0       	breq	.+10     	; 0xc0 <motor1_forward+0x12>
  b6:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <motor1_direction>
  c0:	41 9a       	sbi	0x08, 1	; 8
  c2:	40 98       	cbi	0x08, 0	; 8
  c4:	08 95       	ret

000000c6 <motor1_backward>:
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <motor1_direction>
  ca:	88 23       	and	r24, r24
  cc:	21 f0       	breq	.+8      	; 0xd6 <motor1_backward+0x10>
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
  d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <motor1_direction>
  d6:	40 9a       	sbi	0x08, 0	; 8
  d8:	41 98       	cbi	0x08, 1	; 8
  da:	08 95       	ret

000000dc <motor2_stop>:
	MOTOR2_PORT &= ~(1<<IN3);
	
}
void motor2_stop()
{
	MOTOR2_PORT &= ~(1<<IN3);
  dc:	42 98       	cbi	0x08, 2	; 8
	MOTOR2_PORT &= ~(1<<IN4);
  de:	43 98       	cbi	0x08, 3	; 8
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
  e0:	18 bc       	out	0x28, r1	; 40
  e2:	08 95       	ret

000000e4 <motor2_forward>:
	motor2_speed(0);
}*/

void motor2_forward(void)
{
	if(motor2_direction != forward)
  e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motor2_direction>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	29 f0       	breq	.+10     	; 0xf6 <motor2_forward+0x12>
	{
		motor2_stop();
  ec:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
		motor2_direction = forward ;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <motor2_direction>
	}
	MOTOR2_PORT |=(1<<IN4);
  f6:	43 9a       	sbi	0x08, 3	; 8
	MOTOR2_PORT &= ~(1<<IN3);
  f8:	42 98       	cbi	0x08, 2	; 8
  fa:	08 95       	ret

000000fc <motors_init>:
char motor1_direction =forward;
char motor2_direction = forward;

void motors_init()
{
	TCCR0A |=(1<<COM0A1)|(1<<COM0B1)|(1<<WGM00)|(1<<WGM01);
  fc:	84 b5       	in	r24, 0x24	; 36
  fe:	83 6a       	ori	r24, 0xA3	; 163
 100:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=(1<<CS00);
 102:	85 b5       	in	r24, 0x25	; 37
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 bd       	out	0x25, r24	; 37
	//motor1 
	DDRD |= (1<<EN1);
 108:	56 9a       	sbi	0x0a, 6	; 10
	MOTOR1_DDR |=(1<<IN1)|(1<<IN2);
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	83 60       	ori	r24, 0x03	; 3
 10e:	87 b9       	out	0x07, r24	; 7
	motor1_forward();
 110:	0e 94 57 00 	call	0xae	; 0xae <motor1_forward>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 114:	17 bc       	out	0x27, r1	; 39
	DDRD |= (1<<EN1);
	MOTOR1_DDR |=(1<<IN1)|(1<<IN2);
	motor1_forward();
	motor1_speed(0);
	//motor2
	DDRD |= 1<<EN2 ;
 116:	55 9a       	sbi	0x0a, 5	; 10
	MOTOR2_DDR |= (1<<IN3)|(1<<IN4);
 118:	87 b1       	in	r24, 0x07	; 7
 11a:	8c 60       	ori	r24, 0x0C	; 12
 11c:	87 b9       	out	0x07, r24	; 7
	motor2_forward();
 11e:	0e 94 72 00 	call	0xe4	; 0xe4 <motor2_forward>
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
 122:	18 bc       	out	0x28, r1	; 40
 124:	08 95       	ret

00000126 <motor2_backward>:
	motor2_speed(0);
	
}
void motor2_backward(void)
{
	if(motor2_direction != backward)
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motor2_direction>
 12a:	88 23       	and	r24, r24
 12c:	21 f0       	breq	.+8      	; 0x136 <motor2_backward+0x10>
	{
		motor2_stop();
 12e:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
		motor2_direction = backward ;
 132:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <motor2_direction>
		
	}
	MOTOR2_PORT |=(1<<IN3);
 136:	42 9a       	sbi	0x08, 2	; 8
	MOTOR2_PORT &= ~(1<<IN4);
 138:	43 98       	cbi	0x08, 3	; 8
 13a:	08 95       	ret

0000013c <ultra_config>:


int ovf = 0;

void ultra_config(void){
	ULTRA_DDR |=(1<<trig); //output
 13c:	21 9a       	sbi	0x04, 1	; 4
	ULTRA_DDR &= ~(1<<echo); // input
 13e:	20 98       	cbi	0x04, 0	; 4
 140:	08 95       	ret

00000142 <sendEcho>:
	// PORTB =0xff;
}

void sendEcho()
{
	ULTRA_PORT |=(1<<trig);
 142:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8a e1       	ldi	r24, 0x1A	; 26
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <sendEcho+0x4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <sendEcho+0xa>
	_delay_us(10);
	ULTRA_PORT &=~(1<<trig);
 14c:	29 98       	cbi	0x05, 1	; 5
 14e:	08 95       	ret

00000150 <cm_Distance>:

double cm_Distance()
{

	//over flow intterupt enable
	TIMSK1 |= (1<<TOIE1);
 150:	ef e6       	ldi	r30, 0x6F	; 111
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
	TCCR1A = 0 ;
 15a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>



	sendEcho();
 15e:	0e 94 a1 00 	call	0x142	; 0x142 <sendEcho>
	TCNT1 = 0 ;
 162:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 166:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//input capture at rising no prescaler
	TCCR1B |=(1<<ICES1)|(1<<CS10);
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	81 64       	ori	r24, 0x41	; 65
 172:	80 83       	st	Z, r24
	//clear capture flag
	TIFR1 |= (1<<ICF1);
 174:	b5 9a       	sbi	0x16, 5	; 22
	TIFR1 |= (1<<TOV1);
 176:	b0 9a       	sbi	0x16, 0	; 22
	//wait for rising edge
	while((TIFR1 & (1<<ICF1))==0);
 178:	b5 9b       	sbis	0x16, 5	; 22
 17a:	fe cf       	rjmp	.-4      	; 0x178 <cm_Distance+0x28>
	TCNT1 = 0 ;
 17c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 180:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//capture on falling edge
	TCCR1B &=~(1<<ICES1);
 184:	e1 e8       	ldi	r30, 0x81	; 129
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8f 7b       	andi	r24, 0xBF	; 191
 18c:	80 83       	st	Z, r24
	//clear capture flag
	TIFR1 |= (1<<ICF1);
 18e:	b5 9a       	sbi	0x16, 5	; 22
	TIFR1 |= (1<<TOV1);
 190:	b0 9a       	sbi	0x16, 0	; 22
	ovf=0 ;
 192:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 196:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>

	//wait for falling edge
	while((TIFR1 & (1<<ICF1))==0);
 19a:	b5 9b       	sbis	0x16, 5	; 22
 19c:	fe cf       	rjmp	.-4      	; 0x19a <cm_Distance+0x4a>
	unsigned int cap = (0x0000ffff & ICR1 );
 19e:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 1a2:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>

	unsigned long count = cap + 65535*ovf;
	double  distance = (double)count/928;
	//return 0 ;

	return distance;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 1a 02 	call	0x434	; 0x434 <__floatunsisf>
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	48 e6       	ldi	r20, 0x68	; 104
 1b4:	54 e4       	ldi	r21, 0x44	; 68
 1b6:	0e 94 a8 01 	call	0x350	; 0x350 <__divsf3>

}
 1ba:	08 95       	ret

000001bc <__vector_13>:


ISR(TIMER1_OVF_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	8f 93       	push	r24
 1c8:	9f 93       	push	r25
	ovf++;
 1ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1d8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

}
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <car_init>:

void car_init(void)
{
	//config IR interrupts
	
	ultra_config();
 1ea:	0e 94 9e 00 	call	0x13c	; 0x13c <ultra_config>
	motors_init();
 1ee:	0e 94 7e 00 	call	0xfc	; 0xfc <motors_init>
 1f2:	08 95       	ret

000001f4 <Brake>:
	}
	Dir = BL ;
}
void Brake(void)
{
	Dir = S ;
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
motor1_stop();
 1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
motor2_stop();	
 1fe:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
 202:	08 95       	ret

00000204 <carForward>:
	
	
}

void carForward(char s)
{
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
	if(Dir != F)
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	31 f0       	breq	.+12     	; 0x21c <carForward+0x18>
	{
		Brake() ;
 210:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor1_forward();
 214:	0e 94 57 00 	call	0xae	; 0xae <motor1_forward>
		motor2_forward();
 218:	0e 94 72 00 	call	0xe4	; 0xe4 <motor2_forward>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 21c:	c7 bd       	out	0x27, r28	; 39
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
 21e:	c8 bd       	out	0x28, r28	; 40
		
	}
        motor1_speed(s);
		motor2_speed(s);
	Dir = F ;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
}
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <carReverse>:

void carReverse(char s)
{
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	
	if(Dir != B)
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 232:	88 23       	and	r24, r24
 234:	31 f0       	breq	.+12     	; 0x242 <carReverse+0x18>
	{
		
		Brake();
 236:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor1_backward();
 23a:	0e 94 63 00 	call	0xc6	; 0xc6 <motor1_backward>
		motor2_backward();
 23e:	0e 94 93 00 	call	0x126	; 0x126 <motor2_backward>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 242:	c7 bd       	out	0x27, r28	; 39
}

/////////////////////////////////////////////
void motor2_speed(char s2)
{
	OCR0B = s2;
 244:	c8 bd       	out	0x28, r28	; 40
		
}
		motor1_speed(s);
		motor2_speed(s);
		Dir = B;
 246:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Dir>
		
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <carRightF>:

void carRightF(void)
{
	if(Dir != FR)
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	41 f0       	breq	.+16     	; 0x266 <carRightF+0x18>
	{
		
		Brake();
 256:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor2_forward();
 25a:	0e 94 72 00 	call	0xe4	; 0xe4 <motor2_forward>
		motor1_stop();
 25e:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
 262:	87 e8       	ldi	r24, 0x87	; 135
 264:	88 bd       	out	0x28, r24	; 40
		motor2_speed(135);
		
	}
	Dir=FR;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 26c:	08 95       	ret

0000026e <carRightB>:
	
}

void carRightB(void)
{
	if(Dir != BR)
 26e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 272:	85 30       	cpi	r24, 0x05	; 5
 274:	41 f0       	breq	.+16     	; 0x286 <carRightB+0x18>
	{
		
		Brake();
 276:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor2_backward();
 27a:	0e 94 93 00 	call	0x126	; 0x126 <motor2_backward>
		motor1_stop();
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <motor1_stop>
 282:	87 e8       	ldi	r24, 0x87	; 135
 284:	88 bd       	out	0x28, r24	; 40
		motor2_speed(135);
		
	}
	Dir=BR;
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 28c:	08 95       	ret

0000028e <carLeftF>:
	
}

void carLeftF(void)
{
	if(Dir != FL)
 28e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	41 f0       	breq	.+16     	; 0x2a6 <carLeftF+0x18>
	{
		Brake();
 296:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
	motor1_forward();
 29a:	0e 94 57 00 	call	0xae	; 0xae <motor1_forward>
	motor2_stop();
 29e:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
	motor1_speed(0);
}*/

void motor1_speed(char s1)
{
	OCR0A = s1;
 2a2:	86 e9       	ldi	r24, 0x96	; 150
 2a4:	87 bd       	out	0x27, r24	; 39
	motor1_speed(150);
	}
	Dir = FL ;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 2ac:	08 95       	ret

000002ae <carLeftB>:
}

void carLeftB(void)
{
	if(Dir != BL)
 2ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Dir>
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	41 f0       	breq	.+16     	; 0x2c6 <carLeftB+0x18>
	{
		Brake();
 2b6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		motor1_backward();
 2ba:	0e 94 63 00 	call	0xc6	; 0xc6 <motor1_backward>
		motor2_stop();
 2be:	0e 94 6e 00 	call	0xdc	; 0xdc <motor2_stop>
 2c2:	86 e9       	ldi	r24, 0x96	; 150
 2c4:	87 bd       	out	0x27, r24	; 39
		motor1_speed(150);
	}
	Dir = BL ;
 2c6:	84 e0       	ldi	r24, 0x04	; 4
 2c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Dir>
 2cc:	08 95       	ret

000002ce <main>:



int main(void)
{
sei();
 2ce:	78 94       	sei
car_init();
 2d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <car_init>

//ultra_config();

  DDRC &= ~((1<<DDC5)|(1<<DDC4));
 2d4:	87 b1       	in	r24, 0x07	; 7
 2d6:	8f 7c       	andi	r24, 0xCF	; 207
 2d8:	87 b9       	out	0x07, r24	; 7
/*for(int i =0 ;i<20;i++)
{
	us += cm_Distance();
}
us /=20 ;*/
	if(cm_Distance()>15.0)
 2da:	0e 94 a8 00 	call	0x150	; 0x150 <cm_Distance>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	40 e7       	ldi	r20, 0x70	; 112
 2e4:	51 e4       	ldi	r21, 0x41	; 65
 2e6:	0e 94 a8 02 	call	0x550	; 0x550 <__gesf2>
 2ea:	18 16       	cp	r1, r24
 2ec:	dc f4       	brge	.+54     	; 0x324 <main+0x56>
	{
		
		char f = ((PINC & 0b00110000)>>4);
 2ee:	c6 b1       	in	r28, 0x06	; 6
 2f0:	c0 73       	andi	r28, 0x30	; 48
 2f2:	c2 95       	swap	r28
 2f4:	cf 70       	andi	r28, 0x0F	; 15
		//debounce
		//_delay_ms(20);
		//if(f !=((PINC & 0b00110000)>>4) )f=0;
		if(f==0)carForward(150);
 2f6:	21 f4       	brne	.+8      	; 0x300 <main+0x32>
 2f8:	86 e9       	ldi	r24, 0x96	; 150
 2fa:	0e 94 02 01 	call	0x204	; 0x204 <carForward>
 2fe:	ed cf       	rjmp	.-38     	; 0x2da <main+0xc>
		else
		{
			Brake();
 300:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
			//_delay_ms(1000);
			if(f==3)
 304:	c3 30       	cpi	r28, 0x03	; 3
 306:	21 f4       	brne	.+8      	; 0x310 <main+0x42>
			{
				carReverse(150);
 308:	86 e9       	ldi	r24, 0x96	; 150
 30a:	0e 94 15 01 	call	0x22a	; 0x22a <carReverse>
 30e:	e5 cf       	rjmp	.-54     	; 0x2da <main+0xc>
				//_delay_ms(1000);
			}
			if(f==2)
 310:	c2 30       	cpi	r28, 0x02	; 2
 312:	19 f4       	brne	.+6      	; 0x31a <main+0x4c>
			{
				carRightF();
 314:	0e 94 27 01 	call	0x24e	; 0x24e <carRightF>
 318:	e0 cf       	rjmp	.-64     	; 0x2da <main+0xc>
				//_delay_ms(700);
				
			}
			if(f==1)
 31a:	c1 30       	cpi	r28, 0x01	; 1
 31c:	f1 f6       	brne	.-68     	; 0x2da <main+0xc>
			{
				carLeftF();
 31e:	0e 94 47 01 	call	0x28e	; 0x28e <carLeftF>
 322:	db cf       	rjmp	.-74     	; 0x2da <main+0xc>
		}
		
	}
	else
	{
		char f = ((PINC & 0b00110000)>>4);
 324:	c6 b1       	in	r28, 0x06	; 6
 326:	c0 73       	andi	r28, 0x30	; 48
 328:	c2 95       	swap	r28
 32a:	cf 70       	andi	r28, 0x0F	; 15
		//debounce
		//_delay_ms(20);
		//if(f !=((PINC & 0b00110000)>>4) )f=0;
		Brake();
 32c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Brake>
		//_delay_ms(1000);
		if(f==1)
 330:	c1 30       	cpi	r28, 0x01	; 1
 332:	19 f4       	brne	.+6      	; 0x33a <main+0x6c>
		{
			carLeftB();
 334:	0e 94 57 01 	call	0x2ae	; 0x2ae <carLeftB>
 338:	05 c0       	rjmp	.+10     	; 0x344 <main+0x76>
			//_delay_ms(700);
		}
		if(f==2)
 33a:	c2 30       	cpi	r28, 0x02	; 2
 33c:	19 f4       	brne	.+6      	; 0x344 <main+0x76>
		{
			carRightB();
 33e:	0e 94 37 01 	call	0x26e	; 0x26e <carRightB>
 342:	cb cf       	rjmp	.-106    	; 0x2da <main+0xc>
			//_delay_ms(700);
		}
		else
		{
			carReverse(150);
 344:	86 e9       	ldi	r24, 0x96	; 150
 346:	0e 94 15 01 	call	0x22a	; 0x22a <carReverse>
		    //_delay_ms(500);
			
			
			carRightB();
 34a:	0e 94 37 01 	call	0x26e	; 0x26e <carRightB>
 34e:	c5 cf       	rjmp	.-118    	; 0x2da <main+0xc>

00000350 <__divsf3>:
 350:	0e 94 bc 01 	call	0x378	; 0x378 <__divsf3x>
 354:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_round>
 358:	0e 94 67 02 	call	0x4ce	; 0x4ce <__fp_pscB>
 35c:	58 f0       	brcs	.+22     	; 0x374 <__divsf3+0x24>
 35e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_pscA>
 362:	40 f0       	brcs	.+16     	; 0x374 <__divsf3+0x24>
 364:	29 f4       	brne	.+10     	; 0x370 <__divsf3+0x20>
 366:	5f 3f       	cpi	r21, 0xFF	; 255
 368:	29 f0       	breq	.+10     	; 0x374 <__divsf3+0x24>
 36a:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__fp_inf>
 36e:	51 11       	cpse	r21, r1
 370:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_szero>
 374:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__fp_nan>

00000378 <__divsf3x>:
 378:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fp_split3>
 37c:	68 f3       	brcs	.-38     	; 0x358 <__divsf3+0x8>

0000037e <__divsf3_pse>:
 37e:	99 23       	and	r25, r25
 380:	b1 f3       	breq	.-20     	; 0x36e <__divsf3+0x1e>
 382:	55 23       	and	r21, r21
 384:	91 f3       	breq	.-28     	; 0x36a <__divsf3+0x1a>
 386:	95 1b       	sub	r25, r21
 388:	55 0b       	sbc	r21, r21
 38a:	bb 27       	eor	r27, r27
 38c:	aa 27       	eor	r26, r26
 38e:	62 17       	cp	r22, r18
 390:	73 07       	cpc	r23, r19
 392:	84 07       	cpc	r24, r20
 394:	38 f0       	brcs	.+14     	; 0x3a4 <__divsf3_pse+0x26>
 396:	9f 5f       	subi	r25, 0xFF	; 255
 398:	5f 4f       	sbci	r21, 0xFF	; 255
 39a:	22 0f       	add	r18, r18
 39c:	33 1f       	adc	r19, r19
 39e:	44 1f       	adc	r20, r20
 3a0:	aa 1f       	adc	r26, r26
 3a2:	a9 f3       	breq	.-22     	; 0x38e <__divsf3_pse+0x10>
 3a4:	35 d0       	rcall	.+106    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3a6:	0e 2e       	mov	r0, r30
 3a8:	3a f0       	brmi	.+14     	; 0x3b8 <__divsf3_pse+0x3a>
 3aa:	e0 e8       	ldi	r30, 0x80	; 128
 3ac:	32 d0       	rcall	.+100    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	50 40       	sbci	r21, 0x00	; 0
 3b2:	e6 95       	lsr	r30
 3b4:	00 1c       	adc	r0, r0
 3b6:	ca f7       	brpl	.-14     	; 0x3aa <__divsf3_pse+0x2c>
 3b8:	2b d0       	rcall	.+86     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ba:	fe 2f       	mov	r31, r30
 3bc:	29 d0       	rcall	.+82     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	88 1f       	adc	r24, r24
 3c4:	bb 1f       	adc	r27, r27
 3c6:	26 17       	cp	r18, r22
 3c8:	37 07       	cpc	r19, r23
 3ca:	48 07       	cpc	r20, r24
 3cc:	ab 07       	cpc	r26, r27
 3ce:	b0 e8       	ldi	r27, 0x80	; 128
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <__divsf3_pse+0x56>
 3d2:	bb 0b       	sbc	r27, r27
 3d4:	80 2d       	mov	r24, r0
 3d6:	bf 01       	movw	r22, r30
 3d8:	ff 27       	eor	r31, r31
 3da:	93 58       	subi	r25, 0x83	; 131
 3dc:	5f 4f       	sbci	r21, 0xFF	; 255
 3de:	3a f0       	brmi	.+14     	; 0x3ee <__divsf3_pse+0x70>
 3e0:	9e 3f       	cpi	r25, 0xFE	; 254
 3e2:	51 05       	cpc	r21, r1
 3e4:	78 f0       	brcs	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e6:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__fp_inf>
 3ea:	0c 94 a2 02 	jmp	0x544	; 0x544 <__fp_szero>
 3ee:	5f 3f       	cpi	r21, 0xFF	; 255
 3f0:	e4 f3       	brlt	.-8      	; 0x3ea <__divsf3_pse+0x6c>
 3f2:	98 3e       	cpi	r25, 0xE8	; 232
 3f4:	d4 f3       	brlt	.-12     	; 0x3ea <__divsf3_pse+0x6c>
 3f6:	86 95       	lsr	r24
 3f8:	77 95       	ror	r23
 3fa:	67 95       	ror	r22
 3fc:	b7 95       	ror	r27
 3fe:	f7 95       	ror	r31
 400:	9f 5f       	subi	r25, 0xFF	; 255
 402:	c9 f7       	brne	.-14     	; 0x3f6 <__divsf3_pse+0x78>
 404:	88 0f       	add	r24, r24
 406:	91 1d       	adc	r25, r1
 408:	96 95       	lsr	r25
 40a:	87 95       	ror	r24
 40c:	97 f9       	bld	r25, 7
 40e:	08 95       	ret
 410:	e1 e0       	ldi	r30, 0x01	; 1
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	88 1f       	adc	r24, r24
 418:	bb 1f       	adc	r27, r27
 41a:	62 17       	cp	r22, r18
 41c:	73 07       	cpc	r23, r19
 41e:	84 07       	cpc	r24, r20
 420:	ba 07       	cpc	r27, r26
 422:	20 f0       	brcs	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 424:	62 1b       	sub	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	ba 0b       	sbc	r27, r26
 42c:	ee 1f       	adc	r30, r30
 42e:	88 f7       	brcc	.-30     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 430:	e0 95       	com	r30
 432:	08 95       	ret

00000434 <__floatunsisf>:
 434:	e8 94       	clt
 436:	09 c0       	rjmp	.+18     	; 0x44a <__floatsisf+0x12>

00000438 <__floatsisf>:
 438:	97 fb       	bst	r25, 7
 43a:	3e f4       	brtc	.+14     	; 0x44a <__floatsisf+0x12>
 43c:	90 95       	com	r25
 43e:	80 95       	com	r24
 440:	70 95       	com	r23
 442:	61 95       	neg	r22
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	8f 4f       	sbci	r24, 0xFF	; 255
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	99 23       	and	r25, r25
 44c:	a9 f0       	breq	.+42     	; 0x478 <__floatsisf+0x40>
 44e:	f9 2f       	mov	r31, r25
 450:	96 e9       	ldi	r25, 0x96	; 150
 452:	bb 27       	eor	r27, r27
 454:	93 95       	inc	r25
 456:	f6 95       	lsr	r31
 458:	87 95       	ror	r24
 45a:	77 95       	ror	r23
 45c:	67 95       	ror	r22
 45e:	b7 95       	ror	r27
 460:	f1 11       	cpse	r31, r1
 462:	f8 cf       	rjmp	.-16     	; 0x454 <__floatsisf+0x1c>
 464:	fa f4       	brpl	.+62     	; 0x4a4 <__floatsisf+0x6c>
 466:	bb 0f       	add	r27, r27
 468:	11 f4       	brne	.+4      	; 0x46e <__floatsisf+0x36>
 46a:	60 ff       	sbrs	r22, 0
 46c:	1b c0       	rjmp	.+54     	; 0x4a4 <__floatsisf+0x6c>
 46e:	6f 5f       	subi	r22, 0xFF	; 255
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	16 c0       	rjmp	.+44     	; 0x4a4 <__floatsisf+0x6c>
 478:	88 23       	and	r24, r24
 47a:	11 f0       	breq	.+4      	; 0x480 <__floatsisf+0x48>
 47c:	96 e9       	ldi	r25, 0x96	; 150
 47e:	11 c0       	rjmp	.+34     	; 0x4a2 <__floatsisf+0x6a>
 480:	77 23       	and	r23, r23
 482:	21 f0       	breq	.+8      	; 0x48c <__floatsisf+0x54>
 484:	9e e8       	ldi	r25, 0x8E	; 142
 486:	87 2f       	mov	r24, r23
 488:	76 2f       	mov	r23, r22
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__floatsisf+0x5e>
 48c:	66 23       	and	r22, r22
 48e:	71 f0       	breq	.+28     	; 0x4ac <__floatsisf+0x74>
 490:	96 e8       	ldi	r25, 0x86	; 134
 492:	86 2f       	mov	r24, r22
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	2a f0       	brmi	.+10     	; 0x4a4 <__floatsisf+0x6c>
 49a:	9a 95       	dec	r25
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	da f7       	brpl	.-10     	; 0x49a <__floatsisf+0x62>
 4a4:	88 0f       	add	r24, r24
 4a6:	96 95       	lsr	r25
 4a8:	87 95       	ror	r24
 4aa:	97 f9       	bld	r25, 7
 4ac:	08 95       	ret

000004ae <__fp_inf>:
 4ae:	97 f9       	bld	r25, 7
 4b0:	9f 67       	ori	r25, 0x7F	; 127
 4b2:	80 e8       	ldi	r24, 0x80	; 128
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	08 95       	ret

000004ba <__fp_nan>:
 4ba:	9f ef       	ldi	r25, 0xFF	; 255
 4bc:	80 ec       	ldi	r24, 0xC0	; 192
 4be:	08 95       	ret

000004c0 <__fp_pscA>:
 4c0:	00 24       	eor	r0, r0
 4c2:	0a 94       	dec	r0
 4c4:	16 16       	cp	r1, r22
 4c6:	17 06       	cpc	r1, r23
 4c8:	18 06       	cpc	r1, r24
 4ca:	09 06       	cpc	r0, r25
 4cc:	08 95       	ret

000004ce <__fp_pscB>:
 4ce:	00 24       	eor	r0, r0
 4d0:	0a 94       	dec	r0
 4d2:	12 16       	cp	r1, r18
 4d4:	13 06       	cpc	r1, r19
 4d6:	14 06       	cpc	r1, r20
 4d8:	05 06       	cpc	r0, r21
 4da:	08 95       	ret

000004dc <__fp_round>:
 4dc:	09 2e       	mov	r0, r25
 4de:	03 94       	inc	r0
 4e0:	00 0c       	add	r0, r0
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__fp_round+0xc>
 4e4:	88 23       	and	r24, r24
 4e6:	52 f0       	brmi	.+20     	; 0x4fc <__fp_round+0x20>
 4e8:	bb 0f       	add	r27, r27
 4ea:	40 f4       	brcc	.+16     	; 0x4fc <__fp_round+0x20>
 4ec:	bf 2b       	or	r27, r31
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__fp_round+0x18>
 4f0:	60 ff       	sbrs	r22, 0
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <__fp_round+0x20>
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	08 95       	ret

000004fe <__fp_split3>:
 4fe:	57 fd       	sbrc	r21, 7
 500:	90 58       	subi	r25, 0x80	; 128
 502:	44 0f       	add	r20, r20
 504:	55 1f       	adc	r21, r21
 506:	59 f0       	breq	.+22     	; 0x51e <__fp_splitA+0x10>
 508:	5f 3f       	cpi	r21, 0xFF	; 255
 50a:	71 f0       	breq	.+28     	; 0x528 <__fp_splitA+0x1a>
 50c:	47 95       	ror	r20

0000050e <__fp_splitA>:
 50e:	88 0f       	add	r24, r24
 510:	97 fb       	bst	r25, 7
 512:	99 1f       	adc	r25, r25
 514:	61 f0       	breq	.+24     	; 0x52e <__fp_splitA+0x20>
 516:	9f 3f       	cpi	r25, 0xFF	; 255
 518:	79 f0       	breq	.+30     	; 0x538 <__fp_splitA+0x2a>
 51a:	87 95       	ror	r24
 51c:	08 95       	ret
 51e:	12 16       	cp	r1, r18
 520:	13 06       	cpc	r1, r19
 522:	14 06       	cpc	r1, r20
 524:	55 1f       	adc	r21, r21
 526:	f2 cf       	rjmp	.-28     	; 0x50c <__fp_split3+0xe>
 528:	46 95       	lsr	r20
 52a:	f1 df       	rcall	.-30     	; 0x50e <__fp_splitA>
 52c:	08 c0       	rjmp	.+16     	; 0x53e <__fp_splitA+0x30>
 52e:	16 16       	cp	r1, r22
 530:	17 06       	cpc	r1, r23
 532:	18 06       	cpc	r1, r24
 534:	99 1f       	adc	r25, r25
 536:	f1 cf       	rjmp	.-30     	; 0x51a <__fp_splitA+0xc>
 538:	86 95       	lsr	r24
 53a:	71 05       	cpc	r23, r1
 53c:	61 05       	cpc	r22, r1
 53e:	08 94       	sec
 540:	08 95       	ret

00000542 <__fp_zero>:
 542:	e8 94       	clt

00000544 <__fp_szero>:
 544:	bb 27       	eor	r27, r27
 546:	66 27       	eor	r22, r22
 548:	77 27       	eor	r23, r23
 54a:	cb 01       	movw	r24, r22
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret

00000550 <__gesf2>:
 550:	0e 94 ad 02 	call	0x55a	; 0x55a <__fp_cmp>
 554:	08 f4       	brcc	.+2      	; 0x558 <__gesf2+0x8>
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	08 95       	ret

0000055a <__fp_cmp>:
 55a:	99 0f       	add	r25, r25
 55c:	00 08       	sbc	r0, r0
 55e:	55 0f       	add	r21, r21
 560:	aa 0b       	sbc	r26, r26
 562:	e0 e8       	ldi	r30, 0x80	; 128
 564:	fe ef       	ldi	r31, 0xFE	; 254
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	e8 07       	cpc	r30, r24
 56c:	f9 07       	cpc	r31, r25
 56e:	c0 f0       	brcs	.+48     	; 0x5a0 <__fp_cmp+0x46>
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	98 f0       	brcs	.+38     	; 0x5a0 <__fp_cmp+0x46>
 57a:	62 1b       	sub	r22, r18
 57c:	73 0b       	sbc	r23, r19
 57e:	84 0b       	sbc	r24, r20
 580:	95 0b       	sbc	r25, r21
 582:	39 f4       	brne	.+14     	; 0x592 <__fp_cmp+0x38>
 584:	0a 26       	eor	r0, r26
 586:	61 f0       	breq	.+24     	; 0x5a0 <__fp_cmp+0x46>
 588:	23 2b       	or	r18, r19
 58a:	24 2b       	or	r18, r20
 58c:	25 2b       	or	r18, r21
 58e:	21 f4       	brne	.+8      	; 0x598 <__fp_cmp+0x3e>
 590:	08 95       	ret
 592:	0a 26       	eor	r0, r26
 594:	09 f4       	brne	.+2      	; 0x598 <__fp_cmp+0x3e>
 596:	a1 40       	sbci	r26, 0x01	; 1
 598:	a6 95       	lsr	r26
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	81 1d       	adc	r24, r1
 59e:	81 1d       	adc	r24, r1
 5a0:	08 95       	ret

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
